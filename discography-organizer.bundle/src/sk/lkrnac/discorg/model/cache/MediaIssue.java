package sk.lkrnac.discorg.model.cache;

import sk.lkrnac.discorg.general.constants.MediaIssueCode;
import sk.lkrnac.discorg.model.interfaces.IMediaIssue;

/**
 * Is used for tracking various problems on media storages.
 * 
 * @author sitko
 */
public class MediaIssue implements IMediaIssue {
	private String sourceAbsolutePath;
	private MediaIssueCode issueCode;
	private boolean error;
	private String relativePath;
	private String errorMessage;

	/**
	 * Creates new {@link MediaIssue} instance.
	 * 
	 * @param sourceAbsolutePath
	 *            - ID of issue source
	 * @param issueCode
	 *            - media issue code
	 * @param relativePath
	 *            - Relative path of issue source
	 * @param error
	 *            - indicates is issue is error or warning
	 */
	public MediaIssue(String sourceAbsolutePath, MediaIssueCode issueCode, String relativePath, boolean error) {
		this.sourceAbsolutePath = sourceAbsolutePath;
		this.issueCode = issueCode;
		this.error = error;
		this.relativePath = relativePath;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public final String getSourceAbsolutePath() {
		return sourceAbsolutePath;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public final MediaIssueCode getIssueCode() {
		return issueCode;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public final boolean isError() {
		return error;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public final String getRelativePath() {
		return relativePath;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public final String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage
	 *            optional error message belonging to the issue
	 */
	public final void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * Generated by Eclipse.
	 * <p>
	 * {@inheritDoc}
	 */
	@Override
	public final String toString() {
		return "MediaIssue [relativePath=" + relativePath + ", issueCode=" + issueCode + ", error=" + error
				+ ", sourceAbsolutePath=" + sourceAbsolutePath + "]";
	}

	/**
	 * Generated by Eclipse.
	 * <p>
	 * {@inheritDoc}
	 */
	@Override
	public final int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (error ? 1231 : 1237);
		result = prime * result + ((errorMessage == null) ? 0 : errorMessage.hashCode());
		result = prime * result + ((issueCode == null) ? 0 : issueCode.hashCode());
		result = prime * result + ((relativePath == null) ? 0 : relativePath.hashCode());
		result = prime * result + ((sourceAbsolutePath == null) ? 0 : sourceAbsolutePath.hashCode());
		return result;
	}

	/**
	 * Generated by Eclipse.
	 * <p>
	 * {@inheritDoc}
	 */
	// CHECKSTYLE:OFF
	@Override
	public final boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MediaIssue other = (MediaIssue) obj;
		if (error != other.error)
			return false;
		if (errorMessage == null) {
			if (other.errorMessage != null)
				return false;
		} else if (!errorMessage.equals(other.errorMessage))
			return false;
		if (issueCode != other.issueCode)
			return false;
		if (relativePath == null) {
			if (other.relativePath != null)
				return false;
		} else if (!relativePath.equals(other.relativePath))
			return false;
		if (sourceAbsolutePath == null) {
			if (other.sourceAbsolutePath != null)
				return false;
		} else if (!sourceAbsolutePath.equals(other.sourceAbsolutePath))
			return false;
		return true;
	}
	// CHECKSTYLE:ON

}
